「Dockerコマンドの紹介」
Docker run　コマンドは複数のコマンドを統合している
　docker pull イメージの取得　
   Docker create　コンテナの作成
   Docker start　コンテナの起動

Docker run hello-world:latest ← タグを指定している
Docker run docker/whalesay cowsay Hello!　← イメージの後ろにコンテナないで呼び出すコマンドを記載できる。


docker images pullしたイメージの一覧を確認することができる

イメージをコピーするコマンド
Docker tag 元のイメージ名　新しいイメージ名

イメージのタグを変更するコマンド
Docker tag 元のイメージ名　新しいイメージ名:タグ名

イメージの詳細情報を取得するコマンド
Docker inspect 対象のイメージ

イメージの削除コマンド
Docker rmi イメージ名
[強制]
Docker rmi -f イメージ名

イメージの取得
Docker pull イメージ名

Dockerfileからイメージを作ることをビルドと言う。
FROM 取得するイメージ：タグ
RUN ビルドの際に実行する命令
CMされるコマンド

Dockerfileからイメージをビルドするコマンド
Docker build -t (タグ名) .(ビルドコンテキストの位置)

キャッシュを残さない方法
Docker build —no-cache -t nginx .

コンテナを立ち上げるコマンド
Docker run —name <コンテナの名前>  -d -p <ホスト側のポート番号>：＜コンテナ側のポート番号＞　＜イメージ名＞ 

バインドマウントをしようする場合のコマンド
Docker run  —name <コンテナの名前> -d
　＼ -v　＜ホスト側のディレクトリ＞：＜コンテナ側のマウントポイント＞：＜オブション＞
　＼　-p <ホスト側のポート番号>：＜コンテナ側のポート番号＞　＜イメージ名＞ 

Dockerコンテナを終了時にコンテナを削除するコマンド
Docker run —name test -d —rm nginx

ホストマシンのファイルをコンテナ内にコピーする方法
Docker cp <ホスト上のコピーしたいファイルパス>　＜コンテナ名＞：＜コピー先のパス＞
(逆を行いたい場合は以下を実行)
Docker cp ＜コンテナ名＞：<コンテナ上のコピーしたいファイルパス> ＜コピー先のパス＞

Dockerfileのaddは色々な機能があるので、使う時には調べてからしようする。

コンテナの作成時には、以下のコマンドを使用する。
Docker create —name ＜コンテナ名＞　-it 　＜イメージ名＞ /bin/bash

コンテナの一覧を表示するコマンド
Docker ps -a

コンテナの中身を見るコマンド
Docker inspect ＜コンテナ名＞

コンテナのシェルの接続方法
Docker exec -it ＜コンテナ名＞ /bin/bash

Dockerのコンテナをイメージ化する
Docker commit ＜コンテナ名＞　＜イメージ名＞＜タグ名＞

Automated Buildの概要
Githunのビルドコンテキスト(Dockerfileなど)を管理し、変更が確認出来次第自動的にDockerHubにビルドを実行する仕組みのこと
(現在は有料プラン)

Docker machine
Docker engineを搭載した仮装マシンの作成、起動、停止、再起動などを行えるツール。
ローカルだけでなく、リモートのクラウドサーバー上にもdockerホストを立ち上げることが可能。

Docker-machine ls で一覧を表示

Dockerホストの作成のしかた
Docker-machine create —driver  virtualbox ＜作成するホストの名前＞


ネットワークからコンテナを切断する方法
Docker network disconnect <ネットワーク名>　<コンテナ名>

-p　コマンドを指定することで外部から接続することが可能

Docker-machineホストのIPアドレスの確認方法
Docker-machine ip <ホスト名>


DOCKER_HOST=tcp://192.168.99.103:2376

Dockerのデータ管理

・volume
Volumeのファイルの作成の仕方
Docker volume create <ファイル名>
